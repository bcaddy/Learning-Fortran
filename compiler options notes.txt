Standard debugging compile settings:

gfortran -std=f2018 -Wextra -Wall -pedantic -fimplicit-none -fcheck=all -Og -g -fbacktrace filename.f90 -o outputfilename


High performance compile options

gfortran -std=f2018 -fimplicit-none -O3 filename.f90 -o outputfilename


##### Debug Options #####
-fbounds-check  !checks array bounds, is included in -fcheck=all
-Wextra			!enable some extra warning flags that are not enabled by -Wall.
-Wall			!enable all the warnings about constructions that some users consider questionable, and that are easy to avoid
				!(or modify to prevent the warning), even in conjunction with macros.
-pedantic		!to generate warnings about language features that are supported by gfortran but are not part of the official
				!Fortran 95 standard. It possible to be even more "pedantic" and use -std=f95 flag for warnings to become errors.
-fimplicit-none !specify that no implicit typing is allowed, unless overridden by explicit IMPLICIT statements. This is the
				!equivalent of adding implicit none to the start of every procedure.
-fcheck=all 	!enable runtime tests suck as array bounds and checks
-fbacktrace		!enable backtracing
-Og				!optimization that doesn't interfere with debugging
-g 				!produces debugging info for GDB

##### Other #####
-static			!compiles all libraries into the executable

#####  Optimization Options #####
-O 				!basic optimization, still compiles fairly quickly
-O2				!more optimization, takes longer to compile
-O3				!maximize performance, long compile times
-O0				!fast compiling, very little optimization. This is the DEFAULT
-Os				!optimize for size
-Ofast 			!O3 with fast non accurate math calculations


Basic Usage

GNU Fortran is used to compile a source file, source.f90 to an object file, object.o or an executable.
Along the way it generates module description files for the modules it encounters. These files are named
nameofmodule.mod If a module is used, gfortran will read from these same files.

In order to compile the source file source.f90 one would run:

gfortran -c source.f90

The output file will automatically be named source.o This is an object file, which cannot be executed.

Once you have compiled some source files, you can link them together with the necessary libraries to
generate an executable. This is done as follows:

gfortran -o executable object1.o object2.o ...

where the the executable will be named executable and the objectN.o are object files, which may have
been created as above, or equally well by another compiler from sources in a different language. If -o
executable is omitted, the executable will be named a.out (on cygwin systems: a.exe . The executable may
then be executed like any other program.

One may also skip the separate compilation step, and enter a command such as:


gfortran -o executable source1.f90 source2.f90
which will compile the source files source1.f90 and source2.f90, link and generate the executable in one step.
You can also put object files on this command line, they will be automatically linked in during the link step.


#####  Coarray Fortran Options  #####
Use the -fcoarray= flag with the following options
none: no coarrays, error if one found, default
single: optimize for single image
lib: A communication-library-based coarray version, described at https://gcc.gnu.org/wiki/CoarrayLib


install open coarrays with
$ brew install opencoarrays

then you can compile a program one of two ways

  Using caf:
  you can use the "caf" script to compile.  Basically this just passes all the suitable parallelization flags to gfortran and lets
  you pass any other flags you need to.  Basic implemetation below

  $ caf [flags] [program_name].f95 -o [executable_name]

  then run it with

  $ cafrun -np [X] ./[executable]

  where X is the number of images at program start up.  By default X cannot be larger than the number of physical cores, adding the
	--oversubscribe flag however lets you add more, just be reasonable about the number of images.


  Using gfortran directly:
  If you prefer to invoke the compiler directly, first run caf and cafrun with the --show flag to see the proper linking and
  file includes.
